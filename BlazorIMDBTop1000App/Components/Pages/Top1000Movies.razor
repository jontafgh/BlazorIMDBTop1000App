@page "/top1000movies"
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using System.Globalization
<h3>Top1000Movies</h3>
<div>
    <b>Sort:</b><br />
    <InputRadioGroup @bind-Value=@_sortDirection @bind-Value:after=OrderMovies>
        <InputRadio Value="@true" />Descending
        <InputRadio Value="@false" />Ascending<br />
    </InputRadioGroup>
    <b>Sort By:</b><br />
    <InputRadioGroup @bind-Value="@_sortBy" @bind-Value:after=OrderMovies>
        <InputRadio Value="MovieProperty.SeriesTitle" />Movie
        <InputRadio Value="MovieProperty.ReleasedYear" />Released Year
        <InputRadio Value="MovieProperty.Certificate" />Certificate
        <InputRadio Value="MovieProperty.Runtime" />Runtime
        <InputRadio Value="MovieProperty.Genre" />Genre<br />
        <InputRadio Value="MovieProperty.IMDBRating" />IMDB Rating
        <InputRadio Value="MovieProperty.Metascore" />Meta Score
        <InputRadio Value="MovieProperty.Director" />Director
        <InputRadio Value="MovieProperty.NoOfVotes" />Number Of Votes
        <InputRadio Value="MovieProperty.Gross" />Gross
    </InputRadioGroup>
</div>

<div>
    <b>Search By:</b><br />
    <InputRadioGroup @bind-Value="@_searchBy">
        <InputRadio Value="MovieProperty.SeriesTitle" />Movie
        <InputRadio Value="MovieProperty.Director" />Director
        <InputRadio Value="MovieProperty.Star" />Actors
    </InputRadioGroup>
    <InputText @bind-Value=@_serachTerm @oninput=OnSearch></InputText>
</div>
@if (_filter != null)
{
    <div class="d-inline-block">
        <p><b>Filter By:</b></p>
        Year:<br />
        <FilterSliderPair ValueFrom="@_filter.ReleasedYear.From"
                          ValueTo="@_filter.ReleasedYear.To"
                          ValueFromChanged="@((x) => _filter.ReleasedYear.From = (int)x)"
                          ValueToChanged="@((x) => _filter.ReleasedYear.To = (int)x)"
                          OnValueChange="OrderMovies" />
        Runtime:<br />
        <FilterSliderPair IsTimeSpan="true"
                          ValueFrom="@_filter.Runtime.From"
                          ValueTo="@_filter.Runtime.To"
                          ValueFromChanged="@((x) => _filter.Runtime.From = (int)x)"
                          ValueToChanged="@((x) => _filter.Runtime.To = (int)x)"
                          OnValueChange="OrderMovies" />
        Gross:<br />
        <FilterSliderPair ValueFrom="@_filter.Gross.From"
                          ValueTo="@_filter.Gross.To"
                          ValueFromChanged="@((x) => _filter.Gross.From = (int)x)"
                          ValueToChanged="@((x) => _filter.Gross.To = (int)x)"
                          OnValueChange="OrderMovies" />
    </div>

    <div class="d-inline-block">
        <p><b>Filter By:</b></p>
        IMDB Rating:<br />
        <FilterSliderPair ValueFrom="@_filter.ImdbRating.From"
                          ValueTo="@_filter.ImdbRating.To"
                          ValueFromChanged="@((x) => _filter.ImdbRating.From = x)"
                          ValueToChanged="@((x) => _filter.ImdbRating.To = x)"
                          OnValueChange="OrderMovies" />
        Number of votes:<br />
        <FilterSliderPair ValueFrom="@_filter.NoOfVotes.From"
                          ValueTo="@_filter.NoOfVotes.To"
                          ValueFromChanged="@((x) => _filter.NoOfVotes.From = (int)x)"
                          ValueToChanged="@((x) => _filter.NoOfVotes.To = (int)x)"
                          OnValueChange="OrderMovies" />
        Metascore:<br />
        <FilterSliderPair ValueFrom="@_filter.MetaScore.From"
                          ValueTo="@_filter.MetaScore.To"
                          ValueFromChanged="@((x) => _filter.MetaScore.From = (int)x)"
                          ValueToChanged="@((x) => _filter.MetaScore.To = (int)x)"
                          OnValueChange="OrderMovies" />
    </div>
}
<table class="table" style="width:100%">
    <thead>
        <tr>
            <th>Title</th>
            <th>Year</th>
            <th>Rating</th>
            <th>
                @if (_sortBy != MovieProperty.SeriesTitle && _sortBy != MovieProperty.IMDBRating && _sortBy != MovieProperty.ReleasedYear)
                {
                    @(SetCurrentSortPropertyTitle(_sortBy))
                }
            </th>
            <th>
                @if (_searchBy == MovieProperty.Star)
                {
                    @("Actors")
                }
            </th>
            <th><button type="button" @onclick=OnHideAllClick>Hide All</button></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var movie in _sortedMovies)
        {
            <tr>
                <td width="30%"><b>@movie.SeriesTitle</b></td>
                <td width="10%">@movie.ReleasedYear.ToString("yyyy")</td>
                <td width="10%">@movie.IMDBRating</td>
                <td width="20%">@(SetCurrentSortProperty(_sortBy, movie))</td>
                <td width="20%">
                    @if (_searchBy == MovieProperty.Star)
                    {
                        @(SetActorsInMovie(movie)[0])<br />
                        @(SetActorsInMovie(movie)[1])
                    }
                </td>
                <td width="10%"><button type="button" @onclick="() => OnShowClick(movie)">Show</button></td>
            </tr>
            @if (_shownMovies.Contains(movie))
            {
                <tr style="align-content:center">
                    <td colspan="5"><Top1000Movie CurrentMovie="@movie"></Top1000Movie></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Movie> _movies = new List<Movie>();
    private List<Movie> _sortedMovies = new List<Movie>();
    private List<Movie> _shownMovies = new List<Movie>();
    private ImdbTop1000Filter? _filter;

    private MovieProperty _sortBy = MovieProperty.IMDBRating;
    private bool _sortDirection = false;

    private MovieProperty _searchBy = MovieProperty.SeriesTitle;
    private string _serachTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        MovieCsvDataAccess movieCsvDataAccess = new MovieCsvDataAccess();
        _movies = await movieCsvDataAccess.GetImdbTop1000MoviesAsync();
        _filter = new ImdbTop1000Filter(_movies);
        OrderMovies();
    }
    private string? SetCurrentSortProperty(MovieProperty movieProperty, Movie movie) => movieProperty switch
    {
        MovieProperty.Certificate => movie.Certificate,
        MovieProperty.Runtime => movie.Runtime.ToString(),
        MovieProperty.Genre => movie.Genre,
        MovieProperty.Metascore => movie.Metascore.ToString(),
        MovieProperty.Director => movie.Director,
        MovieProperty.NoOfVotes => movie.NoofVotes.ToString(),
        MovieProperty.Gross => movie.Gross.ToString("C0"),
        _ => string.Empty
    };
    public string SetCurrentSortPropertyTitle(MovieProperty sortBy)
    {
        return string.Join(" ", Regex.Split(_sortBy.ToString(), @"([A-Z]?[a-z]+)").Where(str => !string.IsNullOrEmpty(str)));
    }
    public string[] SetActorsInMovie(Movie movie)
    {
        return [$"{movie.Star1}, {movie.Star2}", $"{movie.Star3}, {movie.Star4}"];
    }
    private void OrderMovies()
    {
        Sort();
        Search();
        Filter();
    }
    private void Sort()
    {
        _sortedMovies = _movies.Sort(_sortDirection, _sortBy);
    }
    private void Search()
    {
        _sortedMovies = _sortedMovies.Search(_serachTerm, _searchBy);
    }
    private void Filter()
    {
        if (_filter != null)
        {
            _sortedMovies = _sortedMovies.Filter(DateOnly.ParseExact(_filter.ReleasedYear.From.ToString(), "yyyy"), DateOnly.ParseExact(_filter.ReleasedYear.To.ToString(), "yyyy"), MovieProperty.ReleasedYear)!;
            _sortedMovies = _sortedMovies.Filter(TimeSpan.FromMinutes(_filter.Runtime.From), TimeSpan.FromMinutes(_filter.Runtime.To), MovieProperty.Runtime)!;
            _sortedMovies = _sortedMovies.Filter(_filter.Gross.From, _filter.Gross.To, MovieProperty.Gross)!;
            _sortedMovies = _sortedMovies.Filter(_filter.ImdbRating.From, _filter.ImdbRating.To, MovieProperty.IMDBRating)!;
            _sortedMovies = _sortedMovies.Filter(_filter.NoOfVotes.From, _filter.NoOfVotes.To, MovieProperty.NoOfVotes)!;
            _sortedMovies = _sortedMovies.Filter(_filter.MetaScore.From, _filter.MetaScore.To, MovieProperty.Metascore)!;
        }
    }
    private void OnShowClick(Movie movie)
    {
        if (!_shownMovies.Contains(movie))
        {
            _shownMovies.Add(movie);
        }
        else
        {
            _shownMovies.Remove(movie);
        }
    }
    private void OnHideAllClick()
    {
        _shownMovies = new List<Movie>();
    }
    private void OnSearch(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            _serachTerm = e.Value.ToString() ?? string.Empty;
        }
        OrderMovies();
    }
}