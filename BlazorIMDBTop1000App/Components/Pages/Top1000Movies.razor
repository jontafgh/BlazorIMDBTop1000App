@page "/top1000movies"
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using System.Globalization
<h3>Top1000Movies</h3>
<div>
    <b>Sort:</b>
    <br />
    <InputRadioGroup @bind-Value=@_sortDirection @bind-Value:after=OrderMovies>
        <InputRadio Value="@true"></InputRadio>Descending
        <InputRadio Value="@false"></InputRadio>Ascending<br />
    </InputRadioGroup>
    <b>Sort By:</b>
    <br />
    <InputRadioGroup @bind-Value="@_sortBy" @bind-Value:after=OrderMovies>
        <InputRadio Value="MovieProperty.SeriesTitle"></InputRadio>Movie
        <InputRadio Value="MovieProperty.ReleasedYear"></InputRadio>Released Year
        <InputRadio Value="MovieProperty.Certificate"></InputRadio>Certificate
        <InputRadio Value="MovieProperty.Runtime"></InputRadio>Runtime
        <InputRadio Value="MovieProperty.Genre"></InputRadio>Genre<br />
        <InputRadio Value="MovieProperty.IMDBRating"></InputRadio>IMDB Rating
        <InputRadio Value="MovieProperty.Metascore"></InputRadio>Meta Score
        <InputRadio Value="MovieProperty.Director"></InputRadio>Director
        <InputRadio Value="MovieProperty.NoOfVotes"></InputRadio>Number Of Votes
        <InputRadio Value="MovieProperty.Gross"></InputRadio>Gross
    </InputRadioGroup>
</div>

<div>
    <b>Search By:</b>
    <br />
    <InputRadioGroup @bind-Value="@_searchBy">
        <InputRadio Value="MovieProperty.SeriesTitle"></InputRadio>Movie
        <InputRadio Value="MovieProperty.Director"></InputRadio>Director
        <InputRadio Value="MovieProperty.Star"></InputRadio>Actors
    </InputRadioGroup>
    <InputText @bind-Value=@_serachTerm @oninput=OnSearch></InputText>
</div>

<div class="d-inline-block">
    <p><b>Filter By:</b></p>
    Year:
    <br />
    <input type="range" min="@_releaseYearFilterMin" max="@_releaseYearFilterTo" @bind-value="@_releaseYearFilterFrom" @oninput=OnChangeYearFrom @bind-value:after=OrderMovies />From: @_releaseYearFilterFrom<br />
    <input type="range" min="@_releaseYearFilterFrom" max="@_releaseYearFilterMax" @bind-value="@_releaseYearFilterTo" @oninput=OnChangeYearTo @bind-value:after=OrderMovies />To: @_releaseYearFilterTo<br />
    Runtime:
    <br />
    <input type="range" min="@_runtimeFilterMin" max="@_runtimeFilterTo" @bind-value="@_runtimeFilterFrom" @oninput=OnChangeRuntimeFrom @bind-value:after=OrderMovies />From: @TimeSpan.FromMinutes(_runtimeFilterFrom)<br />
    <input type="range" min="@_runtimeFilterFrom" max="@_runtimeFilterMax" @bind-value="@_runtimeFilterTo" @oninput=OnChangeRuntimeTo @bind-value:after=OrderMovies />To: @TimeSpan.FromMinutes(_runtimeFilterTo)<br />
    Gross:
    <br />
    <input type="range" min="@_grossFilterMin" max="@_grossFilterTo" @bind-value="@_grossFilterFrom" @oninput=OnChangeGrossFrom @bind-value:after=OrderMovies />From: @_grossFilterFrom<br />
    <input type="range" min="@_grossFilterFrom" max="@_grossFilterMax" @bind-value="@_grossFilterTo" @oninput=OnChangeGrossTo @bind-value:after=OrderMovies />To: @_grossFilterTo<br />
</div>

<div class="d-inline-block">
    <p><b>Filter By:</b></p>
    IMDB Rating:
    <br />
    <input type="range" min="@_imdbRatingFilterMin" max="@_imdbRatingFilterTo" step="0.1" @bind-value="@_imdbRatingFilterFrom" @oninput=OnChangeImdbRatingFrom @bind-value:after=OrderMovies />From: @_imdbRatingFilterFrom<br />
    <input type="range" min="@_imdbRatingFilterFrom" max="@_imdbRatingFilterMax" step="0.1" @bind-value="@_imdbRatingFilterTo" @oninput=OnChangeImdbRatingTo @bind-value:after=OrderMovies />To: @_imdbRatingFilterTo<br />
    Number of votes:
    <br />
    <input type="range" min="@_nooVotesFilterMin" max="@_nooVotesFilterTo" @bind-value="@_nooVotesFilterFrom" @oninput=OnChangeNoOfVotesFrom @bind-value:after=OrderMovies />From: @_nooVotesFilterFrom<br />
    <input type="range" min="@_nooVotesFilterFrom" max="@_nooVotesFilterMax" @bind-value="@_nooVotesFilterTo" @oninput=OnChangeNoOfVotesTo @bind-value:after=OrderMovies />To: @_nooVotesFilterTo<br />
    Metascore:
    <br />
    <input type="range" min="@_metaScoreFilterMin" max="@_metaScoreFilterTo" @bind-value="@_metaScoreFilterFrom" @oninput=OnChangeMetaScoreFrom @bind-value:after=OrderMovies />From: @_metaScoreFilterFrom<br />
    <input type="range" min="@_metaScoreFilterFrom" max="@_metaScoreFilterMax" @bind-value="@_metaScoreFilterTo" @oninput=OnChangeMetaScoreTo @bind-value:after=OrderMovies />To: @_metaScoreFilterTo<br />
</div>

<table class="table" style="width:90%">
    <thead>
        <tr>
            <th>Title</th>
            <th>Year</th>
            <th>Rating</th>
            <th>
                @if (_sortBy != MovieProperty.SeriesTitle && _sortBy != MovieProperty.IMDBRating && _sortBy != MovieProperty.ReleasedYear)
                {
                    @(SetCurrentSortPropertyTitle(_sortBy))
                }
            </th>
            <th><button type="button" @onclick=OnHideAllClick>Hide All</button></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var movie in _sortedMovies)
        {
            <tr>
                <td width="50%"><b>@movie.SeriesTitle</b></td>
                <td width="10%">@movie.ReleasedYear.ToString("yyyy")</td>
                <td width="10%">@movie.IMDBRating</td>
                <td width="20%">@(SetCurrentSortProperty(_sortBy, movie))</td>
                <td width="10%"><button type="button" @onclick="() => OnShowClick(movie)">Show</button></td>
            </tr>
            @if (_shownMovies.Contains(movie))
            {
                <tr style="align-content:center">
                    <td colspan="5"><Top1000Movie CurrentMovie="@movie"></Top1000Movie></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Movie> _movies = new List<Movie>();
    private List<Movie> _sortedMovies = new List<Movie>();
    private List<Movie> _shownMovies = new List<Movie>();
    private List<Movie> _filteredMovies = new List<Movie>();
    private MovieProperty _sortBy = MovieProperty.IMDBRating;
    private MovieProperty _searchBy = MovieProperty.SeriesTitle;
    private bool _sortDirection = false;
    private string _serachTerm = "";
    private int _releaseYearFilterMin;
    private int _releaseYearFilterMax;
    private int _releaseYearFilterFrom;
    private int _releaseYearFilterTo;
    private int _runtimeFilterMin;
    private int _runtimeFilterMax;
    private int _runtimeFilterFrom;
    private int _runtimeFilterTo;
    private int _grossFilterMin;
    private int _grossFilterMax;
    private int _grossFilterFrom;
    private int _grossFilterTo;
    private float _imdbRatingFilterMin;
    private float _imdbRatingFilterMax;
    private float _imdbRatingFilterFrom;
    private float _imdbRatingFilterTo;
    private int _nooVotesFilterMin;
    private int _nooVotesFilterMax;
    private int _nooVotesFilterFrom;
    private int _nooVotesFilterTo;
    private int _metaScoreFilterMin;
    private int _metaScoreFilterMax;
    private int _metaScoreFilterFrom;
    private int _metaScoreFilterTo;

    protected override void OnInitialized()
    {
        MovieCsvDataAccess movieCsvDataAccess = new MovieCsvDataAccess();
        _movies = movieCsvDataAccess.GetImdbTop1000Movies();
        SetFilters();
        OrderMovies();
    }
    private string? SetCurrentSortProperty(MovieProperty movieProperty, Movie movie) => movieProperty switch
    {
        MovieProperty.Certificate => movie.Certificate,
        MovieProperty.Runtime => movie.Runtime.ToString(),
        MovieProperty.Genre => movie.Genre,
        MovieProperty.Metascore => movie.Metascore.ToString(),
        MovieProperty.Director => movie.Director,
        MovieProperty.NoOfVotes => movie.NoofVotes.ToString(),
        MovieProperty.Gross => movie.Gross.ToString("C0"),
        _ => string.Empty
    };
    public string SetCurrentSortPropertyTitle(MovieProperty sortBy)
    {
        return string.Join(" ", Regex.Split(_sortBy.ToString(), @"([A-Z]?[a-z]+)").Where(str => !string.IsNullOrEmpty(str)));
    }
    private void OrderMovies()
    {
        Sort();
        Search();
        Filter();
    }
    private void Sort()
    {
        _sortedMovies = _movies.Sort(_sortDirection, _sortBy);
    }
    private void Search()
    {
        _sortedMovies = _sortedMovies.Search(_serachTerm, _searchBy);
    }
    private void Filter()
    {
        _sortedMovies = _sortedMovies.Filter(DateOnly.ParseExact(_releaseYearFilterFrom.ToString(), "yyyy"), DateOnly.ParseExact(_releaseYearFilterTo.ToString(), "yyyy"), MovieProperty.ReleasedYear)!;
        _sortedMovies = _sortedMovies.Filter(TimeSpan.FromMinutes(_runtimeFilterFrom), TimeSpan.FromMinutes(_runtimeFilterTo), MovieProperty.Runtime)!;
        _sortedMovies = _sortedMovies.Filter(_grossFilterFrom, _grossFilterTo, MovieProperty.Gross)!;
        _sortedMovies = _sortedMovies.Filter(_imdbRatingFilterFrom, _imdbRatingFilterTo, MovieProperty.IMDBRating)!;
        _sortedMovies = _sortedMovies.Filter(_nooVotesFilterFrom, _nooVotesFilterTo, MovieProperty.NoOfVotes)!;
        _sortedMovies = _sortedMovies.Filter(_metaScoreFilterFrom, _metaScoreFilterTo, MovieProperty.Metascore)!;
    }
    private void SetFilters()
    {
        _releaseYearFilterMin = int.Parse(_movies.OrderBy(x => x.ReleasedYear).ToList()[0].ReleasedYear.ToString("yyyy"));
        _releaseYearFilterMax = int.Parse(_movies.OrderByDescending(x => x.ReleasedYear).ToList()[0].ReleasedYear.ToString("yyyy"));
        _releaseYearFilterFrom = _releaseYearFilterMin;
        _releaseYearFilterTo = _releaseYearFilterMax;

        _runtimeFilterMin = (int)_movies.OrderBy(x => x.Runtime).ToList()[0].Runtime.TotalMinutes;
        _runtimeFilterMax = (int)_movies.OrderByDescending(x => x.Runtime).ToList()[0].Runtime.TotalMinutes;
        _runtimeFilterFrom = _runtimeFilterMin;
        _runtimeFilterTo = _runtimeFilterMax;

        _grossFilterMin = _movies.OrderBy(x => x.Gross).ToList()[0].Gross;
        _grossFilterMax = _movies.OrderByDescending(x => x.Gross).ToList()[0].Gross;
        _grossFilterFrom = _grossFilterMin;
        _grossFilterTo = _grossFilterMax;

        _imdbRatingFilterMin = _movies.OrderBy(x => x.IMDBRating).ToList()[0].IMDBRating;
        _imdbRatingFilterMax = _movies.OrderByDescending(x => x.IMDBRating).ToList()[0].IMDBRating;
        _imdbRatingFilterFrom = _imdbRatingFilterMin;
        _imdbRatingFilterTo = _imdbRatingFilterMax;

        _nooVotesFilterMin = _movies.OrderBy(x => x.NoofVotes).ToList()[0].NoofVotes;
        _nooVotesFilterMax = _movies.OrderByDescending(x => x.NoofVotes).ToList()[0].NoofVotes;
        _nooVotesFilterFrom = _nooVotesFilterMin;
        _nooVotesFilterTo = _nooVotesFilterMax;

        _metaScoreFilterMin = _movies.OrderBy(x => x.Metascore).ToList()[0].Metascore;
        _metaScoreFilterMax = _movies.OrderByDescending(x => x.Metascore).ToList()[0].Metascore;
        _metaScoreFilterFrom = _metaScoreFilterMin;
        _metaScoreFilterTo = _metaScoreFilterMax;
    }
    private void OnShowClick(Movie movie)
    {
        if (!_shownMovies.Contains(movie))
        {
            _shownMovies.Add(movie);
        }
        else
        {
            _shownMovies.Remove(movie);
        }
    }
    private void OnHideAllClick()
    {
        _shownMovies = new List<Movie>();
    }
    private void OnSearch(ChangeEventArgs e)
    {
        _serachTerm = e!.Value!.ToString()!;
        OrderMovies();
    }
    private void OnChangeYearFrom(ChangeEventArgs e)
    {
        _releaseYearFilterFrom = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeYearTo(ChangeEventArgs e)
    {
        _releaseYearFilterTo = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeRuntimeFrom(ChangeEventArgs e)
    {
        _runtimeFilterFrom = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeRuntimeTo(ChangeEventArgs e)
    {
        _runtimeFilterTo = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeGrossFrom(ChangeEventArgs e)
    {
        _grossFilterFrom = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeGrossTo(ChangeEventArgs e)
    {
        _grossFilterTo = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeImdbRatingFrom(ChangeEventArgs e)
    {
        _imdbRatingFilterFrom = float.Parse(e.Value!.ToString()!);
    }
    private void OnChangeImdbRatingTo(ChangeEventArgs e)
    {
        _imdbRatingFilterTo = float.Parse(e.Value!.ToString()!);
    }
    private void OnChangeNoOfVotesFrom(ChangeEventArgs e)
    {
        _nooVotesFilterFrom = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeNoOfVotesTo(ChangeEventArgs e)
    {
        _nooVotesFilterTo = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeMetaScoreFrom(ChangeEventArgs e)
    {
        _metaScoreFilterFrom = int.Parse(e.Value!.ToString()!);
    }
    private void OnChangeMetaScoreTo(ChangeEventArgs e)
    {
        _metaScoreFilterTo = int.Parse(e.Value!.ToString()!);
    }
}