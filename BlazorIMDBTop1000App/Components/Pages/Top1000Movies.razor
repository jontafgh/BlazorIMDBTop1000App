@page "/top1000movies"
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using System.Globalization
<h3>Top1000Movies</h3>
<div>
    <b>Sort:</b>
    <br />
    <InputRadioGroup @bind-Value=@_sortDirection @bind-Value:after=OrderMovies>
        <InputRadio Value="@true"></InputRadio>Descending
        <InputRadio Value="@false"></InputRadio>Ascending<br />
    </InputRadioGroup>
    <b>Sort By:</b>
    <br />
    <InputRadioGroup @bind-Value="@_sortBy" @bind-Value:after=OrderMovies>
        <InputRadio Value="MovieProperty.SeriesTitle"></InputRadio>Movie
        <InputRadio Value="MovieProperty.ReleasedYear"></InputRadio>Released Year
        <InputRadio Value="MovieProperty.Certificate"></InputRadio>Certificate
        <InputRadio Value="MovieProperty.Runtime"></InputRadio>Runtime
        <InputRadio Value="MovieProperty.Genre"></InputRadio>Genre<br />
        <InputRadio Value="MovieProperty.IMDBRating"></InputRadio>IMDB Rating
        <InputRadio Value="MovieProperty.Metascore"></InputRadio>Meta Score
        <InputRadio Value="MovieProperty.Director"></InputRadio>Director
        <InputRadio Value="MovieProperty.NoOfVotes"></InputRadio>Number Of Votes
        <InputRadio Value="MovieProperty.Gross"></InputRadio>Gross
    </InputRadioGroup>
</div>

<div>
    <b>Search By:</b>
    <br />
    <InputRadioGroup @bind-Value="@_searchBy">
        <InputRadio Value="MovieProperty.SeriesTitle"></InputRadio>Movie
        <InputRadio Value="MovieProperty.Director"></InputRadio>Director
        <InputRadio Value="MovieProperty.Star"></InputRadio>Actors
    </InputRadioGroup>
    <InputText @bind-Value=@_serachTerm @oninput=OnSearch></InputText>
</div>

<div class="d-inline-block">
    <p><b>Filter By:</b></p>
    Year:<br />
    <FilterSliderPair ValueFrom="@_releaseYearFilterFrom" ValueTo="@_releaseYearFilterTo" ValueFromChanged="@((x) => _releaseYearFilterFrom = (int)x)" ValueToChanged="@((x) => _releaseYearFilterTo = (int)x)" OnValueChange="OrderMovies" />
    Runtime:<br />
    <FilterSliderPair IsTimeSpan="true" ValueFrom="@_runtimeFilterFrom" ValueTo="@_runtimeFilterTo" ValueFromChanged="@((x) => _runtimeFilterFrom = (int)x)" ValueToChanged="@((x) => _runtimeFilterTo = (int)x)" OnValueChange="OrderMovies" />
    Gross:<br />
    <FilterSliderPair ValueFrom="@_grossFilterFrom" ValueTo="@_grossFilterTo" ValueFromChanged="@((x) => _grossFilterFrom = (int)x)" ValueToChanged="@((x) => _grossFilterTo = (int)x)" OnValueChange="OrderMovies" />
</div>

<div class="d-inline-block">
    <p><b>Filter By:</b></p>
    IMDB Rating:
    <br />
    <FilterSliderPair ValueFrom="@_imdbRatingFilterFrom" ValueTo="@_imdbRatingFilterTo" ValueFromChanged="@((x) => _imdbRatingFilterFrom = x)" ValueToChanged="@((x) => _imdbRatingFilterTo = x)" OnValueChange="OrderMovies" />
    Number of votes:<br />
    <FilterSliderPair ValueFrom="@_nooVotesFilterFrom" ValueTo="@_nooVotesFilterTo" ValueFromChanged="@((x) => _nooVotesFilterFrom = (int)x)" ValueToChanged="@((x) => _nooVotesFilterTo = (int)x)" OnValueChange="OrderMovies" />
    Metascore:<br />
    <FilterSliderPair ValueFrom="@_metaScoreFilterFrom" ValueTo="@_metaScoreFilterTo" ValueFromChanged="@((x) => _metaScoreFilterFrom = (int)x)" ValueToChanged="@((x) => _metaScoreFilterTo = (int)x)" OnValueChange="OrderMovies" />
</div>

<table class="table" style="width:90%">
    <thead>
        <tr>
            <th>Title</th>
            <th>Year</th>
            <th>Rating</th>
            <th>
                @if (_sortBy != MovieProperty.SeriesTitle && _sortBy != MovieProperty.IMDBRating && _sortBy != MovieProperty.ReleasedYear)
                {
                    @(SetCurrentSortPropertyTitle(_sortBy))
                }
            </th>
            <th><button type="button" @onclick=OnHideAllClick>Hide All</button></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var movie in _sortedMovies)
        {
            <tr>
                <td width="50%"><b>@movie.SeriesTitle</b></td>
                <td width="10%">@movie.ReleasedYear.ToString("yyyy")</td>
                <td width="10%">@movie.IMDBRating</td>
                <td width="20%">@(SetCurrentSortProperty(_sortBy, movie))</td>
                <td width="10%"><button type="button" @onclick="() => OnShowClick(movie)">Show</button></td>
            </tr>
            @if (_shownMovies.Contains(movie))
            {
                <tr style="align-content:center">
                    <td colspan="5"><Top1000Movie CurrentMovie="@movie"></Top1000Movie></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Movie> _movies = new List<Movie>();
    private List<Movie> _sortedMovies = new List<Movie>();
    private List<Movie> _shownMovies = new List<Movie>();

    private MovieProperty _sortBy = MovieProperty.IMDBRating;  
    private bool _sortDirection = false;

    private MovieProperty _searchBy = MovieProperty.SeriesTitle;
    private string _serachTerm = string.Empty;

    private int _releaseYearFilterFrom;
    private int _releaseYearFilterTo;
    private int _runtimeFilterFrom;
    private int _runtimeFilterTo;
    private int _grossFilterFrom;
    private int _grossFilterTo;
    private double _imdbRatingFilterFrom;
    private double _imdbRatingFilterTo;
    private int _nooVotesFilterFrom;
    private int _nooVotesFilterTo;
    private int _metaScoreFilterFrom;
    private int _metaScoreFilterTo;

    protected override void OnInitialized()
    {
        MovieCsvDataAccess movieCsvDataAccess = new MovieCsvDataAccess();
        _movies = movieCsvDataAccess.GetImdbTop1000Movies();
        SetFilters();
        OrderMovies();
    }
    private string? SetCurrentSortProperty(MovieProperty movieProperty, Movie movie) => movieProperty switch
    {
        MovieProperty.Certificate => movie.Certificate,
        MovieProperty.Runtime => movie.Runtime.ToString(),
        MovieProperty.Genre => movie.Genre,
        MovieProperty.Metascore => movie.Metascore.ToString(),
        MovieProperty.Director => movie.Director,
        MovieProperty.NoOfVotes => movie.NoofVotes.ToString(),
        MovieProperty.Gross => movie.Gross.ToString("C0"),
        _ => string.Empty
    };
    public string SetCurrentSortPropertyTitle(MovieProperty sortBy)
    {
        return string.Join(" ", Regex.Split(_sortBy.ToString(), @"([A-Z]?[a-z]+)").Where(str => !string.IsNullOrEmpty(str)));
    }
    private void OrderMovies()
    {
        Sort();
        Search();
        Filter();
    }
    private void Sort()
    {
        _sortedMovies = _movies.Sort(_sortDirection, _sortBy);
    }
    private void Search()
    {
        _sortedMovies = _sortedMovies.Search(_serachTerm, _searchBy);
    }
    private void Filter()
    {
        _sortedMovies = _sortedMovies.Filter(DateOnly.ParseExact(_releaseYearFilterFrom.ToString(), "yyyy"), DateOnly.ParseExact(_releaseYearFilterTo.ToString(), "yyyy"), MovieProperty.ReleasedYear)!;
        _sortedMovies = _sortedMovies.Filter(TimeSpan.FromMinutes(_runtimeFilterFrom), TimeSpan.FromMinutes(_runtimeFilterTo), MovieProperty.Runtime)!;
        _sortedMovies = _sortedMovies.Filter(_grossFilterFrom, _grossFilterTo, MovieProperty.Gross)!;
        _sortedMovies = _sortedMovies.Filter(_imdbRatingFilterFrom, _imdbRatingFilterTo, MovieProperty.IMDBRating)!;
        _sortedMovies = _sortedMovies.Filter(_nooVotesFilterFrom, _nooVotesFilterTo, MovieProperty.NoOfVotes)!;
        _sortedMovies = _sortedMovies.Filter(_metaScoreFilterFrom, _metaScoreFilterTo, MovieProperty.Metascore)!;
    }
    private void SetFilters()
    {
        _releaseYearFilterFrom = int.Parse(_movies.OrderBy(x => x.ReleasedYear).ToList()[0].ReleasedYear.ToString("yyyy"));
        _releaseYearFilterTo = int.Parse(_movies.OrderByDescending(x => x.ReleasedYear).ToList()[0].ReleasedYear.ToString("yyyy"));

        _runtimeFilterFrom = (int)_movies.OrderBy(x => x.Runtime).ToList()[0].Runtime.TotalMinutes;
        _runtimeFilterTo = (int)_movies.OrderByDescending(x => x.Runtime).ToList()[0].Runtime.TotalMinutes;

        _grossFilterFrom = _movies.OrderBy(x => x.Gross).ToList()[0].Gross;
        _grossFilterTo = _movies.OrderByDescending(x => x.Gross).ToList()[0].Gross;

        _imdbRatingFilterFrom = _movies.OrderBy(x => x.IMDBRating).ToList()[0].IMDBRating;
        _imdbRatingFilterTo = _movies.OrderByDescending(x => x.IMDBRating).ToList()[0].IMDBRating;

        _nooVotesFilterFrom = _movies.OrderBy(x => x.NoofVotes).ToList()[0].NoofVotes;
        _nooVotesFilterTo = _movies.OrderByDescending(x => x.NoofVotes).ToList()[0].NoofVotes;

        _metaScoreFilterFrom = _movies.OrderBy(x => x.Metascore).ToList()[0].Metascore;
        _metaScoreFilterTo = _movies.OrderByDescending(x => x.Metascore).ToList()[0].Metascore;
    }
    private void OnShowClick(Movie movie)
    {
        if (!_shownMovies.Contains(movie))
        {
            _shownMovies.Add(movie);
        }
        else
        {
            _shownMovies.Remove(movie);
        }
    }
    private void OnHideAllClick()
    {
        _shownMovies = new List<Movie>();
    }
    private void OnSearch(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            _serachTerm = e.Value.ToString() ?? string.Empty;
        }        
        OrderMovies();
    }
}